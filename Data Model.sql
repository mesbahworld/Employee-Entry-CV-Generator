-- =============================================
-- Employee Management System - Task Compliant Schema with PG1_ Prefix (PlayGround 1)
-- Tables: PG1_EMPLOYEE_MASTER, PG1_EMPLOYEE_EDUCATION, PG1_EMPLOYEE_EXPERIENCE, PG1_LOOKUP_VALUES, PG1_DEPARTMENT_MASTER, PG1_DESIGNATION_MASTER
-- =============================================

-- 1. PG1_EMPLOYEE_MASTER Table
-- =============================================

CREATE TABLE PG1_EMPLOYEE_MASTER (
    EMP_ID NUMBER PRIMARY KEY,
    EMP_CODE VARCHAR2(20) UNIQUE NOT NULL,
    FIRST_NAME VARCHAR2(50) NOT NULL,
    LAST_NAME VARCHAR2(50) NOT NULL,
    FULL_NAME VARCHAR2(101) GENERATED ALWAYS AS (FIRST_NAME || ' ' || LAST_NAME) VIRTUAL,
    EMAIL VARCHAR2(100) UNIQUE NOT NULL,
    PHONE VARCHAR2(20),
    MOBILE VARCHAR2(20),
    NID VARCHAR2(17) UNIQUE NOT NULL,
    DATE_OF_BIRTH DATE,
    
    -- Dynamic dropdown fields (from database, not static)
    GENDER VARCHAR2(20), -- Will be populated from lookup
    BLOOD_GROUP VARCHAR2(10), -- Will be populated from lookup  
    RELIGION VARCHAR2(50), -- Will be populated from lookup
    
    -- Searchable dropdown fields - storing both ID and name for performance
    DEPARTMENT_ID NUMBER,
    DEPARTMENT_NAME VARCHAR2(100), -- Denormalized for faster queries 
    DESIGNATION_ID NUMBER,
    DESIGNATION_NAME VARCHAR2(100), -- Denormalized for faster queries
    
    JOIN_DATE DATE DEFAULT SYSDATE,
    SALARY NUMBER(12,2),
    ADDRESS_PRESENT VARCHAR2(500),
    ADDRESS_PERMANENT VARCHAR2(500),
    EMERGENCY_CONTACT_NAME VARCHAR2(100),
    EMERGENCY_CONTACT_PHONE VARCHAR2(20),
    MARITAL_STATUS VARCHAR2(20) CHECK (MARITAL_STATUS IN ('Single', 'Married', 'Divorced', 'Widowed')),
    
    -- Enhanced fields for advanced features
    SKILLS VARCHAR2(4000), -- JSON format for skills array
    PHOTO BLOB,
    PHOTO_FILENAME VARCHAR2(255),
    PHOTO_MIME_TYPE VARCHAR2(100),
    
    -- System fields
    IS_ACTIVE CHAR(1) DEFAULT 'Y' CHECK (IS_ACTIVE IN ('Y', 'N')),
    CREATED_DATE DATE DEFAULT SYSDATE,
    CREATED_BY VARCHAR2(100) DEFAULT USER,
    MODIFIED_DATE DATE,
    MODIFIED_BY VARCHAR2(100),
    
    -- Validation constraints
    CONSTRAINT PG1_CHK_EMAIL_FORMAT CHECK (REGEXP_LIKE(EMAIL, '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$')),
    CONSTRAINT PG1_CHK_NID_FORMAT CHECK (REGEXP_LIKE(NID, '^[0-9]{10}$|^[0-9]{13}$|^[0-9]{17}$'))
);

-- 2. PG1_EMPLOYEE_EDUCATION Table 
-- =============================================

CREATE TABLE PG1_EMPLOYEE_EDUCATION (
    EDU_ID NUMBER PRIMARY KEY,
    EMP_ID NUMBER NOT NULL,
    DEGREE_TYPE VARCHAR2(50) NOT NULL, -- SSC, HSC, Bachelor, Master, PhD, Diploma, etc.
    DEGREE_TITLE VARCHAR2(100) NOT NULL, -- Computer Science, Business Administration, etc.
    INSTITUTION_NAME VARCHAR2(200) NOT NULL,
    PASSING_YEAR NUMBER(4) NOT NULL,
    RESULT_TYPE VARCHAR2(20), -- GPA, CGPA, Division, Grade, Percentage
    RESULT_VALUE VARCHAR2(20), -- 3.75, First Division, A+, 85%, etc.
    DURATION_YEARS NUMBER(2), -- Duration in years
    MAJOR_SUBJECT VARCHAR2(100), -- Major/Concentration
    IS_CURRENT CHAR(1) DEFAULT 'N' CHECK (IS_CURRENT IN ('Y', 'N')),
    
    -- System fields
    CREATED_DATE DATE DEFAULT SYSDATE,
    CREATED_BY VARCHAR2(100) DEFAULT USER,
    MODIFIED_DATE DATE,
    MODIFIED_BY VARCHAR2(100),
    
    -- Foreign key constraint
    CONSTRAINT PG1_FK_EDU_EMP FOREIGN KEY (EMP_ID) REFERENCES PG1_EMPLOYEE_MASTER(EMP_ID) ON DELETE CASCADE,
    CONSTRAINT PG1_CHK_PASSING_YEAR CHECK (PASSING_YEAR BETWEEN 1950 AND 2030)
);

-- 3. PG1_EMPLOYEE_EXPERIENCE Table 
-- =============================================

CREATE TABLE PG1_EMPLOYEE_EXPERIENCE (
    EXP_ID NUMBER PRIMARY KEY,
    EMP_ID NUMBER NOT NULL,
    COMPANY_NAME VARCHAR2(200) NOT NULL,
    DESIGNATION VARCHAR2(100) NOT NULL,
    DEPARTMENT VARCHAR2(100),
    START_DATE DATE NOT NULL,
    END_DATE DATE,
    IS_CURRENT CHAR(1) DEFAULT 'N' CHECK (IS_CURRENT IN ('Y', 'N')),
    JOB_RESPONSIBILITIES CLOB,
    SALARY_RANGE VARCHAR2(50), -- 50000-70000, 1.5L-2L, etc.
    REASON_FOR_LEAVING VARCHAR2(200),
    SUPERVISOR_NAME VARCHAR2(100),
    SUPERVISOR_CONTACT VARCHAR2(50),
    
    -- Enhanced fields
    LOCATION VARCHAR2(100), -- Work location
    EMPLOYMENT_TYPE VARCHAR2(30), -- Full-time, Part-time, Contract, Internship
    
    -- System fields
    CREATED_DATE DATE DEFAULT SYSDATE,
    CREATED_BY VARCHAR2(100) DEFAULT USER,
    MODIFIED_DATE DATE,
    MODIFIED_BY VARCHAR2(100),
    
    -- Foreign key constraint
    CONSTRAINT PG1_FK_EXP_EMP FOREIGN KEY (EMP_ID) REFERENCES PG1_EMPLOYEE_MASTER(EMP_ID) ON DELETE CASCADE,
    CONSTRAINT PG1_CHK_DATE_LOGIC CHECK (END_DATE IS NULL OR END_DATE >= START_DATE)
);

-- 4. Supporting Lookup Tables
-- =============================================

-- Simple lookup table for dynamic dropdowns
CREATE TABLE PG1_LOOKUP_VALUES (
    LOOKUP_ID NUMBER PRIMARY KEY,
    LOOKUP_TYPE VARCHAR2(50) NOT NULL, -- GENDER, BLOOD_GROUP, RELIGION
    LOOKUP_CODE VARCHAR2(20) NOT NULL,
    LOOKUP_VALUE VARCHAR2(100) NOT NULL,
    DISPLAY_ORDER NUMBER DEFAULT 0,
    IS_ACTIVE CHAR(1) DEFAULT 'Y' CHECK (IS_ACTIVE IN ('Y', 'N')),
    CREATED_DATE DATE DEFAULT SYSDATE,
    CONSTRAINT PG1_UK_LOOKUP_TYPE_CODE UNIQUE (LOOKUP_TYPE, LOOKUP_CODE)
);

-- Department master for searchable dropdown
CREATE TABLE PG1_DEPARTMENT_MASTER (
    DEPT_ID NUMBER PRIMARY KEY,
    DEPT_CODE VARCHAR2(20) UNIQUE NOT NULL,
    DEPT_NAME VARCHAR2(100) NOT NULL,
    DEPT_HEAD VARCHAR2(100),
    IS_ACTIVE CHAR(1) DEFAULT 'Y' CHECK (IS_ACTIVE IN ('Y', 'N')),
    CREATED_DATE DATE DEFAULT SYSDATE
);

-- Designation master for searchable dropdown
CREATE TABLE PG1_DESIGNATION_MASTER (
    DESIG_ID NUMBER PRIMARY KEY,
    DESIG_CODE VARCHAR2(20) UNIQUE NOT NULL,
    DESIG_NAME VARCHAR2(100) NOT NULL,
    DEPT_ID NUMBER, -- Optional link to department
    IS_ACTIVE CHAR(1) DEFAULT 'Y' CHECK (IS_ACTIVE IN ('Y', 'N')),
    CREATED_DATE DATE DEFAULT SYSDATE,
    CONSTRAINT PG1_FK_DESIG_DEPT FOREIGN KEY (DEPT_ID) REFERENCES PG1_DEPARTMENT_MASTER(DEPT_ID)
);

-- 5. Sequences (with PG1_ prefix)
-- =============================================

CREATE SEQUENCE PG1_SEQ_EMPLOYEE_MASTER START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE PG1_SEQ_EMPLOYEE_EDUCATION START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE PG1_SEQ_EMPLOYEE_EXPERIENCE START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE PG1_SEQ_LOOKUP_VALUES START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE PG1_SEQ_DEPARTMENT_MASTER START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE PG1_SEQ_DESIGNATION_MASTER START WITH 1 INCREMENT BY 1;

-- 6. Performance Indexes (with PG1_ prefix)
-- =============================================

-- Primary search indexes
CREATE INDEX PG1_IDX_EMP_EMAIL ON PG1_EMPLOYEE_MASTER(EMAIL);
CREATE INDEX PG1_IDX_EMP_NID ON PG1_EMPLOYEE_MASTER(NID);
CREATE INDEX PG1_IDX_EMP_SEARCH ON PG1_EMPLOYEE_MASTER(UPPER(FIRST_NAME), UPPER(LAST_NAME), EMP_CODE);
CREATE INDEX PG1_IDX_EMP_DEPT ON PG1_EMPLOYEE_MASTER(DEPARTMENT_ID);
CREATE INDEX PG1_IDX_EMP_DESIG ON PG1_EMPLOYEE_MASTER(DESIGNATION_ID);

-- Detail table indexes
CREATE INDEX PG1_IDX_EDU_EMP ON PG1_EMPLOYEE_EDUCATION(EMP_ID);
CREATE INDEX PG1_IDX_EXP_EMP ON PG1_EMPLOYEE_EXPERIENCE(EMP_ID);

-- Lookup indexes
CREATE INDEX PG1_IDX_LOOKUP_TYPE ON PG1_LOOKUP_VALUES(LOOKUP_TYPE, IS_ACTIVE);
CREATE INDEX PG1_IDX_DEPT_SEARCH ON PG1_DEPARTMENT_MASTER(UPPER(DEPT_NAME), UPPER(DEPT_CODE));
CREATE INDEX PG1_IDX_DESIG_SEARCH ON PG1_DESIGNATION_MASTER(UPPER(DESIG_NAME), UPPER(DESIG_CODE));

-- 7. Triggers (with PG1_ prefix)
-- =============================================

-- PG1_EMPLOYEE_MASTER Trigger
CREATE OR REPLACE TRIGGER PG1_TRG_EMPLOYEE_MASTER_BIU
    BEFORE INSERT OR UPDATE ON PG1_EMPLOYEE_MASTER
    FOR EACH ROW
DECLARE
    v_max_code NUMBER;
BEGIN
    -- Auto-generate employee code on INSERT
    IF INSERTING AND :NEW.EMP_CODE IS NULL THEN
        SELECT NVL(MAX(TO_NUMBER(REGEXP_SUBSTR(EMP_CODE, '[0-9]+$'))), 0) + 1
        INTO v_max_code
        FROM PG1_EMPLOYEE_MASTER
        WHERE REGEXP_LIKE(EMP_CODE, '^EMP[0-9]+$');
        
        :NEW.EMP_CODE := 'EMP' || LPAD(v_max_code, 5, '0');
    END IF;
    
    -- Auto-assign primary key
    IF INSERTING AND :NEW.EMP_ID IS NULL THEN
        :NEW.EMP_ID := PG1_SEQ_EMPLOYEE_MASTER.NEXTVAL;
    END IF;
    
    -- Sync denormalized department name
    IF :NEW.DEPARTMENT_ID IS NOT NULL AND (:OLD.DEPARTMENT_ID IS NULL OR :OLD.DEPARTMENT_ID != :NEW.DEPARTMENT_ID) THEN
        SELECT DEPT_NAME INTO :NEW.DEPARTMENT_NAME 
        FROM PG1_DEPARTMENT_MASTER 
        WHERE DEPT_ID = :NEW.DEPARTMENT_ID AND IS_ACTIVE = 'Y';
    END IF;
    
    -- Sync denormalized designation name
    IF :NEW.DESIGNATION_ID IS NOT NULL AND (:OLD.DESIGNATION_ID IS NULL OR :OLD.DESIGNATION_ID != :NEW.DESIGNATION_ID) THEN
        SELECT DESIG_NAME INTO :NEW.DESIGNATION_NAME 
        FROM PG1_DESIGNATION_MASTER 
        WHERE DESIG_ID = :NEW.DESIGNATION_ID AND IS_ACTIVE = 'Y';
    END IF;
    
    -- Audit trail
    IF UPDATING THEN
        :NEW.MODIFIED_DATE := SYSDATE;
        :NEW.MODIFIED_BY := NVL(V('APP_USER'), USER);
    END IF;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        -- Handle cases where department or designation is not found
        NULL;
END;
/

-- PG1_EMPLOYEE_EDUCATION Trigger
CREATE OR REPLACE TRIGGER PG1_TRG_EMPLOYEE_EDUCATION_BI
    BEFORE INSERT ON PG1_EMPLOYEE_EDUCATION
    FOR EACH ROW
BEGIN
    IF :NEW.EDU_ID IS NULL THEN
        :NEW.EDU_ID := PG1_SEQ_EMPLOYEE_EDUCATION.NEXTVAL;
    END IF;
END;
/


-- PG1_EMPLOYEE_EXPERIENCE Trigger  
CREATE OR REPLACE TRIGGER PG1_TRG_EMPLOYEE_EXPERIENCE_BI
    BEFORE INSERT ON PG1_EMPLOYEE_EXPERIENCE
    FOR EACH ROW
BEGIN
    IF :NEW.EXP_ID IS NULL THEN
        :NEW.EXP_ID := PG1_SEQ_EMPLOYEE_EXPERIENCE.NEXTVAL;
    END IF;
END;
/

-- 8. Sample Data Population
-- =============================================

-- Populate lookup values for dynamic dropdowns

    INSERT INTO PG1_LOOKUP_VALUES (LOOKUP_ID, LOOKUP_TYPE, LOOKUP_CODE, LOOKUP_VALUE, DISPLAY_ORDER) VALUES (PG1_SEQ_LOOKUP_VALUES.NEXTVAL, 'GENDER', 'M', 'Male', 1);
    INSERT INTO PG1_LOOKUP_VALUES (LOOKUP_ID, LOOKUP_TYPE, LOOKUP_CODE, LOOKUP_VALUE, DISPLAY_ORDER) VALUES (PG1_SEQ_LOOKUP_VALUES.NEXTVAL, 'GENDER', 'F', 'Female', 2);
    INSERT INTO PG1_LOOKUP_VALUES (LOOKUP_ID, LOOKUP_TYPE, LOOKUP_CODE, LOOKUP_VALUE, DISPLAY_ORDER) VALUES (PG1_SEQ_LOOKUP_VALUES.NEXTVAL, 'GENDER', 'O', 'Other', 3);
    
    INSERT INTO PG1_LOOKUP_VALUES (LOOKUP_ID, LOOKUP_TYPE, LOOKUP_CODE, LOOKUP_VALUE, DISPLAY_ORDER) VALUES (PG1_SEQ_LOOKUP_VALUES.NEXTVAL, 'BLOOD_GROUP', 'A+', 'A+', 1);
    INSERT INTO PG1_LOOKUP_VALUES (LOOKUP_ID, LOOKUP_TYPE, LOOKUP_CODE, LOOKUP_VALUE, DISPLAY_ORDER) VALUES (PG1_SEQ_LOOKUP_VALUES.NEXTVAL, 'BLOOD_GROUP', 'A-', 'A-', 2);
    INSERT INTO PG1_LOOKUP_VALUES (LOOKUP_ID, LOOKUP_TYPE, LOOKUP_CODE, LOOKUP_VALUE, DISPLAY_ORDER) VALUES (PG1_SEQ_LOOKUP_VALUES.NEXTVAL, 'BLOOD_GROUP', 'B+', 'B+', 3);
    INSERT INTO PG1_LOOKUP_VALUES (LOOKUP_ID, LOOKUP_TYPE, LOOKUP_CODE, LOOKUP_VALUE, DISPLAY_ORDER) VALUES (PG1_SEQ_LOOKUP_VALUES.NEXTVAL, 'BLOOD_GROUP', 'B-', 'B-', 4);
    INSERT INTO PG1_LOOKUP_VALUES (LOOKUP_ID, LOOKUP_TYPE, LOOKUP_CODE, LOOKUP_VALUE, DISPLAY_ORDER) VALUES (PG1_SEQ_LOOKUP_VALUES.NEXTVAL, 'BLOOD_GROUP', 'AB+', 'AB+', 5);
    INSERT INTO PG1_LOOKUP_VALUES (LOOKUP_ID, LOOKUP_TYPE, LOOKUP_CODE, LOOKUP_VALUE, DISPLAY_ORDER) VALUES (PG1_SEQ_LOOKUP_VALUES.NEXTVAL, 'BLOOD_GROUP', 'AB-', 'AB-', 6);
    INSERT INTO PG1_LOOKUP_VALUES (LOOKUP_ID, LOOKUP_TYPE, LOOKUP_CODE, LOOKUP_VALUE, DISPLAY_ORDER) VALUES (PG1_SEQ_LOOKUP_VALUES.NEXTVAL, 'BLOOD_GROUP', 'O+', 'O+', 7);
    INSERT INTO PG1_LOOKUP_VALUES (LOOKUP_ID, LOOKUP_TYPE, LOOKUP_CODE, LOOKUP_VALUE, DISPLAY_ORDER) VALUES (PG1_SEQ_LOOKUP_VALUES.NEXTVAL, 'BLOOD_GROUP', 'O-', 'O-', 8);
    
    INSERT INTO PG1_LOOKUP_VALUES (LOOKUP_ID, LOOKUP_TYPE, LOOKUP_CODE, LOOKUP_VALUE, DISPLAY_ORDER) VALUES (PG1_SEQ_LOOKUP_VALUES.NEXTVAL, 'RELIGION', 'ISLAM', 'Islam', 1);
    INSERT INTO PG1_LOOKUP_VALUES (LOOKUP_ID, LOOKUP_TYPE, LOOKUP_CODE, LOOKUP_VALUE, DISPLAY_ORDER) VALUES (PG1_SEQ_LOOKUP_VALUES.NEXTVAL, 'RELIGION', 'HINDUISM', 'Hinduism', 2);
    INSERT INTO PG1_LOOKUP_VALUES (LOOKUP_ID, LOOKUP_TYPE, LOOKUP_CODE, LOOKUP_VALUE, DISPLAY_ORDER) VALUES (PG1_SEQ_LOOKUP_VALUES.NEXTVAL, 'RELIGION', 'BUDDHISM', 'Buddhism', 3);
    INSERT INTO PG1_LOOKUP_VALUES (LOOKUP_ID, LOOKUP_TYPE, LOOKUP_CODE, LOOKUP_VALUE, DISPLAY_ORDER) VALUES (PG1_SEQ_LOOKUP_VALUES.NEXTVAL, 'RELIGION', 'CHRISTIANITY', 'Christianity', 4);
    INSERT INTO PG1_LOOKUP_VALUES (LOOKUP_ID, LOOKUP_TYPE, LOOKUP_CODE, LOOKUP_VALUE, DISPLAY_ORDER) VALUES (PG1_SEQ_LOOKUP_VALUES.NEXTVAL, 'RELIGION', 'OTHER', 'Other', 5);


COMMIT;

-- Sample departments for searchable dropdown

    INSERT INTO PG1_DEPARTMENT_MASTER (DEPT_ID, DEPT_CODE, DEPT_NAME) VALUES (PG1_SEQ_DEPARTMENT_MASTER.NEXTVAL, 'IT', 'Information Technology');
    INSERT INTO PG1_DEPARTMENT_MASTER (DEPT_ID, DEPT_CODE, DEPT_NAME) VALUES (PG1_SEQ_DEPARTMENT_MASTER.NEXTVAL, 'HR', 'Human Resources');
    INSERT INTO PG1_DEPARTMENT_MASTER (DEPT_ID, DEPT_CODE, DEPT_NAME) VALUES (PG1_SEQ_DEPARTMENT_MASTER.NEXTVAL, 'FIN', 'Finance & Accounts');
    INSERT INTO PG1_DEPARTMENT_MASTER (DEPT_ID, DEPT_CODE, DEPT_NAME) VALUES (PG1_SEQ_DEPARTMENT_MASTER.NEXTVAL, 'MKT', 'Marketing & Sales');
    INSERT INTO PG1_DEPARTMENT_MASTER (DEPT_ID, DEPT_CODE, DEPT_NAME) VALUES (PG1_SEQ_DEPARTMENT_MASTER.NEXTVAL, 'OPS', 'Operations');
    INSERT INTO PG1_DEPARTMENT_MASTER (DEPT_ID, DEPT_CODE, DEPT_NAME) VALUES (PG1_SEQ_DEPARTMENT_MASTER.NEXTVAL, 'ADMIN', 'Administration');

COMMIT;

-- Sample designations for searchable dropdown

    INSERT INTO PG1_DESIGNATION_MASTER (DESIG_ID, DESIG_CODE, DESIG_NAME, DEPT_ID) 
    SELECT PG1_SEQ_DESIGNATION_MASTER.NEXTVAL, 'SR_DEV', 'Senior Developer', DEPT_ID FROM PG1_DEPARTMENT_MASTER WHERE DEPT_CODE = 'IT';
    
    INSERT INTO PG1_DESIGNATION_MASTER (DESIG_ID, DESIG_CODE, DESIG_NAME, DEPT_ID) 
    SELECT PG1_SEQ_DESIGNATION_MASTER.NEXTVAL, 'JR_DEV', 'Junior Developer', DEPT_ID FROM PG1_DEPARTMENT_MASTER WHERE DEPT_CODE = 'IT';
    
    INSERT INTO PG1_DESIGNATION_MASTER (DESIG_ID, DESIG_CODE, DESIG_NAME, DEPT_ID) 
    SELECT PG1_SEQ_DESIGNATION_MASTER.NEXTVAL, 'IT_MGR', 'IT Manager', DEPT_ID FROM PG1_DEPARTMENT_MASTER WHERE DEPT_CODE = 'IT';
    
    INSERT INTO PG1_DESIGNATION_MASTER (DESIG_ID, DESIG_CODE, DESIG_NAME, DEPT_ID) 
    SELECT PG1_SEQ_DESIGNATION_MASTER.NEXTVAL, 'HR_MGR', 'HR Manager', DEPT_ID FROM PG1_DEPARTMENT_MASTER WHERE DEPT_CODE = 'HR';
    
    INSERT INTO PG1_DESIGNATION_MASTER (DESIG_ID, DESIG_CODE, DESIG_NAME, DEPT_ID) 
    SELECT PG1_SEQ_DESIGNATION_MASTER.NEXTVAL, 'HR_EXE', 'HR Executive', DEPT_ID FROM PG1_DEPARTMENT_MASTER WHERE DEPT_CODE = 'HR';
    
    INSERT INTO PG1_DESIGNATION_MASTER (DESIG_ID, DESIG_CODE, DESIG_NAME, DEPT_ID) 
    SELECT PG1_SEQ_DESIGNATION_MASTER.NEXTVAL, 'ACC_MGR', 'Accounts Manager', DEPT_ID FROM PG1_DEPARTMENT_MASTER WHERE DEPT_CODE = 'FIN';


COMMIT;

-- 9.1 Views for Easy Data Access (with PG1_ prefix)
-- =============================================

-- Complete employee view all
CREATE OR REPLACE VIEW PG1_VW_EMPLOYEE_COMPLETE AS
SELECT 
    e.EMP_ID,
    e.EMP_CODE,
    e.FIRST_NAME,
    e.LAST_NAME,
    e.FULL_NAME,
    e.EMAIL,
    e.PHONE,
    e.MOBILE,
    e.NID,
    e.DATE_OF_BIRTH,
    e.GENDER,
    e.BLOOD_GROUP,
    e.RELIGION,
    e.DEPARTMENT_ID,
    e.DEPARTMENT_NAME,
    e.DESIGNATION_ID,
    e.DESIGNATION_NAME,
    e.JOIN_DATE,
    e.SALARY,
    e.ADDRESS_PRESENT,
    e.ADDRESS_PERMANENT,
    e.EMERGENCY_CONTACT_NAME,
    e.EMERGENCY_CONTACT_PHONE,
    e.MARITAL_STATUS,
    e.SKILLS,
    e.PHOTO_FILENAME,
    -- Calculate experience in years
    ROUND(MONTHS_BETWEEN(SYSDATE, e.JOIN_DATE) / 12, 1) AS EXPERIENCE_YEARS,
    -- Count education records
    (SELECT COUNT(*) FROM PG1_EMPLOYEE_EDUCATION edu WHERE edu.EMP_ID = e.EMP_ID) AS EDUCATION_COUNT,
    -- Count experience records
    (SELECT COUNT(*) FROM PG1_EMPLOYEE_EXPERIENCE exp WHERE exp.EMP_ID = e.EMP_ID) AS EXPERIENCE_COUNT,
    -- System fields
    e.IS_ACTIVE,
    e.CREATED_DATE,
    e.CREATED_BY,
    e.MODIFIED_DATE,
    e.MODIFIED_BY
FROM PG1_EMPLOYEE_MASTER e
WHERE e.IS_ACTIVE = 'Y';

-- Employee list view for performance
CREATE OR REPLACE VIEW PG1_VW_EMPLOYEE_LIST AS
SELECT 
    e.EMP_ID,
    e.EMP_CODE,
    e.FULL_NAME,
    e.EMAIL,
    NVL(e.MOBILE, e.PHONE) AS PRIMARY_PHONE,
    e.DEPARTMENT_NAME,
    e.DESIGNATION_NAME,
    TO_CHAR(e.JOIN_DATE, 'DD-MON-YYYY') AS JOIN_DATE_FORMATTED,
    CASE WHEN e.PHOTO IS NOT NULL THEN 'Y' ELSE 'N' END AS PHOTO_AVAILABLE,
    e.IS_ACTIVE
FROM PG1_EMPLOYEE_MASTER e
WHERE e.IS_ACTIVE = 'Y'
ORDER BY e.EMP_CODE;

-- 9.2 Views for Easy Data Access (with PG1_ prefix)
-- =============================================

-- Complete employee view with all details
CREATE OR REPLACE VIEW PG1_VW_EMPLOYEE_COMPLETE_WITH_DETAILS AS 
SELECT 
    e.EMP_ID AS empId,
    e.EMP_CODE AS empCode,
    e.FIRST_NAME AS firstName,
    e.LAST_NAME AS lastName,
    e.FULL_NAME AS fullName,
    e.EMAIL AS email,
    e.PHONE AS phone,
    e.MOBILE AS mobile,
    e.NID AS nid,
    e.DATE_OF_BIRTH AS dateOfBirth,
    e.GENDER AS gender,
    e.BLOOD_GROUP AS bloodGroup,
    e.RELIGION AS religion,
    e.DEPARTMENT_ID AS departmentId,
    e.DEPARTMENT_NAME AS departmentName,
    e.DESIGNATION_ID AS designationId,
    e.DESIGNATION_NAME AS designationName,
    e.JOIN_DATE AS joinDate,
    e.SALARY AS salary,
    e.ADDRESS_PRESENT AS addressPresent,
    e.ADDRESS_PERMANENT AS addressPermanent,
    e.EMERGENCY_CONTACT_NAME AS emergencyContactName,
    e.EMERGENCY_CONTACT_PHONE AS emergencyContactPhone,
    e.MARITAL_STATUS AS maritalStatus,
    e.SKILLS AS skills,
    e.PHOTO_FILENAME AS photoFileName,
    ROUND(MONTHS_BETWEEN(SYSDATE, e.JOIN_DATE) / 12, 1) AS experienceYears,
    edu.education_count,
    edu.education,
    exp.experience_count,
    exp.experience,
    e.IS_ACTIVE AS isActive,
    e.CREATED_DATE AS createdDate,
    e.CREATED_BY AS createdBy,
    e.MODIFIED_DATE AS modifiedDate,
    e.MODIFIED_BY AS modifiedBy
FROM PG1_EMPLOYEE_MASTER e

-- JSON EDUCATION using OUTER APPLY
OUTER APPLY (
    SELECT COUNT(*) AS EDUCATION_COUNT,
        JSON_ARRAYAGG(
             JSON_OBJECT(
                 'id' VALUE edu.EDU_ID,
                 'degreeType' VALUE edu.DEGREE_TYPE,
                 'degreeTitle' VALUE edu.DEGREE_TITLE,
                 'institutionName' VALUE edu.INSTITUTION_NAME,
                 'passingYear' VALUE edu.PASSING_YEAR,
                 'resultType' VALUE edu.RESULT_TYPE,
                 'resultValue' VALUE edu.RESULT_VALUE,
                 'duration' VALUE edu.DURATION_YEARS,
                 'majorSubject' VALUE edu.MAJOR_SUBJECT,
                 'isCurrent' VALUE edu.IS_CURRENT
             )
           ) AS education
    FROM PG1_EMPLOYEE_EDUCATION edu
    WHERE edu.EMP_ID = e.EMP_ID
) edu

-- JSON EXPERIENCE using OUTER APPLY
OUTER APPLY (
     SELECT COUNT(*) AS EXPERIENCE_COUNT,
        JSON_ARRAYAGG(
             JSON_OBJECT(
                 'id' VALUE exp.EXP_ID,
                 'companyName' VALUE exp.COMPANY_NAME,
                 'designation' VALUE exp.DESIGNATION,
                 'department' VALUE exp.DEPARTMENT,
                 'employmentType' VALUE exp.EMPLOYMENT_TYPE,
                 'startDate' VALUE exp.START_DATE,
                 'endDate' VALUE exp.END_DATE,
                 'location' VALUE exp.LOCATION,
                 'salaryRange' VALUE exp.SALARY_RANGE,
                 'supervisorName' VALUE exp.SUPERVISOR_NAME,
                 'supervisorContact' VALUE exp.SUPERVISOR_CONTACT,
                 'jobResponsibilities' VALUE exp.JOB_RESPONSIBILITIES,
                 'reasonForLeaving' VALUE exp.REASON_FOR_LEAVING,
                 'isCurrent' VALUE exp.IS_CURRENT
             )
           ) AS experience
    FROM PG1_EMPLOYEE_EXPERIENCE exp
    WHERE exp.EMP_ID = e.EMP_ID
) exp

WHERE e.IS_ACTIVE = 'Y';



-- 10. JSON Data Structure Examples (For Skills field)
-- =============================================

/*
SKILLS JSON Structure in VARCHAR2(4000):
[
  {"name": "Oracle APEX", "level": "Expert", "years": 5},
  {"name": "JavaScript", "level": "Advanced", "years": 4},
  {"name": "PL/SQL", "level": "Expert", "years": 6},
  {"name": "HTML/CSS", "level": "Advanced", "years": 4}
]

Sample Insert Statement for complete employee:
-- Insert into EMPLOYEE_MASTER
INSERT INTO PG1_EMPLOYEE_MASTER (
    FIRST_NAME, LAST_NAME, EMAIL, NID, GENDER, BLOOD_GROUP, RELIGION,
    DEPARTMENT_ID, DESIGNATION_ID, SKILLS
) VALUES (
    'John', 'Doe', 'john.doe@example.com', '1234567890123', 'Male', 'A+', 'Islam',
    1, 1, '[{"name": "Oracle APEX", "level": "Expert", "years": 5}]'
);

-- Insert into EMPLOYEE_EDUCATION (multiple records)
INSERT INTO PG1_EMPLOYEE_EDUCATION (EMP_ID, DEGREE_TYPE, DEGREE_TITLE, INSTITUTION_NAME, PASSING_YEAR)
VALUES (1, 'Bachelor', 'Computer Science', 'University of Dhaka', 2020);

-- Insert into EMPLOYEE_EXPERIENCE (multiple records)
INSERT INTO PG1_EMPLOYEE_EXPERIENCE (EMP_ID, COMPANY_NAME, DESIGNATION, START_DATE, IS_CURRENT)
VALUES (1, 'Tech Solutions Ltd', 'Senior Developer', DATE '2022-01-01', 'Y');
*/